{"ast":null,"code":"import { database } from '../database/config';\nexport function startAddingPost(post) {\n  return dispatch => {\n    return database.ref('posts').update({\n      [post.id]: post\n    }).then(() => {\n      dispatch(addPost(post));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function startLoadingPosts() {\n  return dispatch => {\n    return database.ref('posts').once('value').then(snapshot => {\n      let posts = [];\n      snapshot.forEach(childSnapshot => {\n        posts.push(childSnapshot.val());\n      });\n      dispatch(loadPost(posts));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function startRemovingPost(index, id) {\n  return dispatch => {\n    return database.ref(`posts/${id}`).remove().then(() => {\n      dispatch(removePost(index));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function startAddingComment(comment, postId) {\n  return dispatch => {\n    return database.ref('comments/' + postId).push(comment).then(() => {\n      dispatch(addComment(comment, postId));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function startLoadingComments() {\n  return dispatch => {\n    return database.ref('comments').once('value').then(snapshot => {\n      let comments = [];\n      snapshot.forEach(childSnapshot => {\n        console.log(\"QQQQQQQQQQQQQQQ\");\n        console.log(childSnapshot);\n        comments[childSnapshot.id] = Object.values(childSnapshot.val());\n      });\n      dispatch(loadComments(comments));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function removePost(index) {\n  return {\n    type: 'REMOVE_POST',\n    index\n  };\n}\nexport function addPost(post) {\n  return {\n    type: 'ADD_POST',\n    post\n  };\n}\nexport function addComment(comment, postId) {\n  return {\n    type: 'ADD_COMMENT',\n    comment,\n    postId\n  };\n}\nexport function loadPost(posts) {\n  return {\n    type: 'LOAD_POSTS',\n    posts\n  };\n}\nexport function loadComments(comments) {\n  return {\n    type: 'LOAD_COMMENTS',\n    comments\n  };\n}","map":{"version":3,"sources":["/home/luvly/Workspaces/ReactJSCourse/photowall_v2/src/redux/actions.js"],"names":["database","startAddingPost","post","dispatch","ref","update","id","then","addPost","catch","error","console","log","startLoadingPosts","once","snapshot","posts","forEach","childSnapshot","push","val","loadPost","startRemovingPost","index","remove","removePost","startAddingComment","comment","postId","addComment","startLoadingComments","comments","Object","values","loadComments","type"],"mappings":"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","sourcesContent":["import {database} from '../database/config';\n\nexport function startAddingPost(post){\n    return (dispatch) => {\n        return database.ref('posts').update({[post.id]:post}).then(()=>{\n            dispatch(addPost(post))\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n}\n\nexport function startLoadingPosts(){\n    return(dispatch) => {\n        return database.ref('posts').once('value').then((snapshot)=>{\n            let posts = [];\n            snapshot.forEach((childSnapshot) => {\n                posts.push(childSnapshot.val());\n            });\n            dispatch(loadPost(posts))\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n}\n\nexport function startRemovingPost(index, id){\n    return(dispatch) => {\n        return database.ref(`posts/${id}`).remove().then(()=>{\n            dispatch(removePost(index))\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n}\n\nexport function startAddingComment(comment, postId){\n    return(dispatch) => {\n        return database.ref('comments/'+postId).push(comment).then(()=>{\n            dispatch(addComment(comment, postId))\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n}\n\nexport function startLoadingComments(){\n    return(dispatch)=>{\n        return database.ref('comments').once('value').then((snapshot)=>{\n            let comments = [];\n            snapshot.forEach((childSnapshot) => {\n                console.log(\"QQQQQQQQQQQQQQQ\")\n                console.log(childSnapshot)\n                comments[childSnapshot.id] = Object.values(childSnapshot.val());\n            });\n            dispatch(loadComments(comments))\n\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n}\n\nexport function removePost(index){\n    return {\n        type: 'REMOVE_POST',\n        index\n    }\n}\n\nexport function addPost(post){\n    return {\n        type: 'ADD_POST',\n        post\n    }\n}\n\nexport function addComment(comment, postId){\n    return {\n        type: 'ADD_COMMENT',\n        comment,\n        postId\n    }\n}\n\nexport function loadPost(posts){\n    return {\n        type : 'LOAD_POSTS',\n        posts\n    }\n}\n\nexport function loadComments(comments){\n    return {\n        type : 'LOAD_COMMENTS',\n        comments\n    }\n}"]},"metadata":{},"sourceType":"module"}